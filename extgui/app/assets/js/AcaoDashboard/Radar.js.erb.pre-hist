/*
 * Copyright (C) 2014-2014, Daniele Orlandi
 *
 * Author:: Daniele Orlandi <daniele@orlandi.com>
 *
 * License:: You can redistribute it and/or modify it under the terms of the LICENSE file.
 *
 */

Ext.define('AcaoDashboard.Radar', {
  extend: 'Ext.panel.Panel',
  requires: [
    'Ext.form.Panel',
    'Extgui.AjaxJson',
    'Extgui.gmaps.Map',
    'Ext.grid.Panel',
  ],

  extrapolateEnable: true,
  extrapolateDelay: 75,


  border: false,
  layout: 'border',
  items: [
   {
    xtype: 'gmap',
    region: 'center',
    id: 'radar-map-canvas',
    gmapType: 'SATELLITE',
    mapConf: {
      scrollWheel: true,
      streetViewControl: false,
      draggable: true,
      panControl: false,
    },
    minAccuracy: 1000,
    zoomLevel: 15,
    center: {
      lat: 45.812709,
      lng: 8.763742,
    },
   },
   {
    xtype: 'panel',
    region: 'south',
    height: 250,
    title: 'Log',
    layout: 'fit',
    collapsible: true,
//    collapsed: false,
    items: {
      xtype: 'textarea',
      name: 'logarea',
    },
   },
   {
    xtype: 'grid',
    height: 170,
    region: 'north',
    title: 'Open Flights',
    collapsible: true,
    collapsed: false,
    columns: [
     {
      text: 'Reg',
     },
    ],
   },
  ],

  initComponent: function() {
    var me = this;

    me.callParent(arguments);

    me.down('gmap').on('mapready', function() {
      me.map = me.down('gmap').gmap;

      Ext.Loader.loadScriptFile('<%=asset_path('markerwithlabel.js')%>',
        function() { me.startRadar() },
        function() { console.log("FAILURE"); }
      );

    });

    me.logarea = me.down('[name=logarea]');
  },

  startRadar: function() {
    var me = this;

      me.circuitLayer = new google.maps.KmlLayer(window.location.origin + '/circuit.kml');
      me.circuitLayer.setMap(me.map);

    me.iw = new google.maps.InfoWindow({
    });

    me.objects = {};
    me.stations = {};

    Extgui.app.faye.subscribe('/glideradar/processed/**', function(message) {
      me.onMessage(message);
    }, null, function() {
      alert('Error subscribing to faye events');
    });

    me.periodicTask = Ext.util.TaskManager.start({
      interval: 2000,
      run: me.periodicCleanup,
      scope: me,
    })

    me.setExtrapolateEnable(me.extrapolateEnable);
  },

  setExtrapolateEnable: function(enable) {
    var me = this;

    me.extrapolateEnable = enable;

    if (me.extrapolateTask) {
      clearInterval(me.extrapolateTask);
      me.extrapolateTask = null;
    }

    if (enable) {
      me.extrapolateTask = setInterval(function() { me.extrapolate() }, me.extrapolateDelay);
    }
  },

  fix_types: {
    0: 'Not available',
    1: 'Not available',
    2: '2D',
    3: '3D'
  },

  onMessage: function(message) {
    var me = this;

//    console.log("MSG=", message);

    if (message.type != 'OBJECTS_UPDATE') {
      var newText = me.logarea.getValue() + Ext.Date.format(new Date(), 'H:m:s') + ' ' + (message.payload.text || message.type) + "\n";
      var hasToScroll = me.logarea.inputEl.dom.scrollTop + me.logarea.inputEl.dom.clientHeight == me.logarea.inputEl.dom.scrollHeight;

      me.logarea.setValue(newText);

      if (hasToScroll)
        me.logarea.inputEl.dom.scrollTop = 100000;
    }

    switch(message.type) {
    case 'OBJECTS_UPDATE':
      me.onObjectsUpdate(message.payload);
    break;
    }
  },

  onObjectsUpdate: function(message) {
    var me = this;

    Ext.Object.each(message.stations, function(sta_id, sta) {
      me.onStationUpdate(sta_id, sta);
    });

    Ext.Object.each(message.objects, function(obj_id, obj) {
      me.onObjectUpdate(obj_id, obj);
    });
  },

  onStationUpdate: function(sta_id, sta_data) {
    var me = this;

    var station = me.stations[sta_id];
    if (!station) {
      station = me.stations[sta_id] = {
        station_id: sta_id,
        data: {},
      };
    }

    station.data = sta_data;
    station.local_last_update = new Date;
    station.online = true;

    me.refreshStation(station);
  },

  onObjectUpdate: function(obj_id, data) {
    var me = this;

    var obj = me.objects[obj_id];

    if (!obj) {
      obj = {};

      obj.marker = new MarkerWithLabel({
        position: new google.maps.LatLng(data.lat, data.lng),
        labelContent: obj_id || 'N/A',
        labelClass: 'label',
        map: me.map,
        obj: obj,
      });

      google.maps.event.addListener(obj.marker, 'click', function (e, marker) {
        me.iw.open(me.map, this);
        me.iw.obj = this.obj;
        me.updateObjectIw(this.obj);
      });

      if (data.flarm_code) {
        Extgui.AjaxJson.request({
          url: '/ygg/acao/planes/by_code/' + data.flarm_code,
          method: 'GET',
          success: function(resp) {
            obj.plane = resp.responseJSON;
            me.updateObjectLabel(obj);
          },
        });
      }

      me.objects[obj_id] = obj;
    }

    obj.local_last_update = new Date;

    obj.prev_cog = obj.cog;
    obj.prev_sog = obj.sog;

    Ext.apply(obj, data);

    obj.show_lat = obj.lat;
    obj.show_lng = obj.lng;
    obj.show_cog = obj.cog;

    me.updateObjectPosition(obj);

    if (me.iw.obj == obj)
      me.updateObjectIw(obj);
  },

  periodicCleanup: function() {
    var me = this;

    var now = new Date;

    Ext.Object.each(me.stations, function(sta_id, sta) {
      if (now - sta.local_last_update > 10000) {
        sta.marker.setMap(null);
      }
    });

    Ext.Object.each(me.objects, function(obj_id, obj) {
      if (now - obj.local_last_update > 10000) {
        obj.marker.setMap(null);
      }
    });
  },

  adiff: function(a, b) {
    var d = a - b;
    return d < -180 ? d + 360 : (d > 180 ? d - 360 : d);
  },

  extrapolate: function() {
    var me = this;

    Ext.Object.each(me.objects, function(obj_id, obj) {
      if (spd < 10)
        return;

      var del = (new Date - obj.local_last_update) / 1000.0; // DeltaT in seconds
      var spd = obj.sog + (obj.sog - obj.prev_sog) * del;
      var tr = me.adiff(obj.cog, obj.prev_cog); // obj.tr

      if (tr > 20) tr = 20;
      if (tr < -20) tr = -20;

      var cog = obj.cog + tr * del;
      var cograd = (cog / 180) * Math.PI;

      obj.show_lat = obj.lat + (Math.cos(cograd) * spd * del) / 111111;
      obj.show_lng = obj.lng + (Math.sin(cograd) * spd * del) / (111111 * Math.cos((obj.lat / 180) * Math.PI));
      obj.show_cog = cog;

      me.updateObjectPosition(obj);
    });
  },

  types: {
    0: { name: 'unknown', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    1: { name: 'Aliante', icon: 'M -5,0 5,0 M 0,-1 0,3 M -1,3 1,3 z', color: 'white' },
    2: { name: 'Traino', icon: 'M -3,0 3,0 M 0,-0.5 0,2 M -1,2 1,2 M -0.5,-0.5 0.5,-0.5 z', color: 'orange' },
    3: { name: 'Elicottero', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    4: { name: 'Paracadutista', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    5: { name: 'Aereo Paracadutisti', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    6: { name: 'Deltaplano', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    7: { name: 'Parapendio', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    8: { name: 'Aereo a motore', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    9: { name: 'Jet', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    10: { name: 'Disco volante', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    11: { name: 'Mongolfiera', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    12: { name: 'Dirigibile', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    13: { name: 'UAV', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    14: { name: 'unknown', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
    15: { name: 'Oggetto', icon: 'M -5,0 5,0 M 0,-1 0,4 M -1,4 1,4 z', color: 'white' },
  },

  updateObjectPosition: function(obj) {
    var me = this;

//console.log("O", obj.data);
    obj.marker.setPosition(new google.maps.LatLng(obj.show_lat, obj.show_lng));

    obj.marker.setIcon({
      path: me.getType(obj.type).icon,
      fillColor:  me.getType(obj.type).color,
      strokeColor:  me.getType(obj.type).color,
      strokeWeight: 2,
      scale: 5,
      rotation: obj.show_cog || 0,
      strokeOpacity: Ext.max([0, 1 - ((new Date - obj.local_last_update) / 10000)]),
    });
  },

  updateObjectIw: function(obj) {
    var me = this;

    var txt = '';

    if (obj.plane) {
      txt +=
        '<b>' +
        obj.plane.type_name + ' ' + obj.plane.registration +
        (obj.plane.race_registration ? (' (' + obj.plane.race_registration + ')') : '') +
        '</b><br />';

      txt +=
        'Owner: ' + obj.plane.owner_name + '<br />';
    } else {
      txt += '<b>' + me.getType(obj.type).name + '</b><br />';
    }

    txt +=
      'Height: ' + obj.alt.toFixed(0) + ' m<br />' +
      'Speed: ' + (obj.sog * 3.6).toFixed(0) + ' km/h<br />' +
      'V/S: ' + (obj.cr * 3.6).toFixed(1) + ' m/s<br />';

    me.iw.setContent(txt);
  },

  getType: function(type) {
    var me = this;
    return me.types[type] ? me.types[type] : me.types[0];
  },

  updateObjectLabel: function(obj) {
    var me = this;

    obj.marker.set('labelContent', ((obj.plane && obj.plane.registration) ? obj.plane.registration : obj.flarm_code) || 'N/A');
    obj.marker.label.setStyles();
    obj.marker.label.draw();
  },

  refreshStation: function(station) {
    var me = this;

    var pos = new google.maps.LatLng(station.data.lat, station.data.lng);

    if (!station.marker) {
      station.marker = new google.maps.Marker({
        position: pos,
        title: station.station_id,
        map: me.map,
        icon: {
          url: '<%=asset_path('antenna.png')%>',
          anchor: new google.maps.Point(12, 32),
        },
      });

      google.maps.event.addListener(station.marker, 'click', function (e) {
        me.iw.open(me.map, this);
        me.iw.obj = station;
        me.updateStationIw(station);
      });
    }

    station.marker.setPosition(pos);

    if (me.iw.obj == station)
      me.updateStationIw(station);
  },

  updateStationIw: function(station) {
    var me = this;

    me.iw.setContent(
      'Station: ' + station.station_id + '<br />' +
      'GPS fix type: ' + me.fix_types[station.data.gps_fix_type] + ' (' + station.data.gps_sats + ' sats)<br />' +
      'GPS fix quality: ' + station.data.gps_fix_qual + '<br />' +
      'GPS precision: ' + station.data.gps_pdop + '<br />' +
      'Lat: ' + station.data.lat.toFixed(8) + '°<br />' +
      'Lng: ' + station.data.lng.toFixed(8) + '°<br />' +
      'Altitude: ' + station.data.alt + ' m<br />'
    );
  },

});

